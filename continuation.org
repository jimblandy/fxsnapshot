Git is the backtrace; this is the continuation.

% = < 10 min
%% = 1-8 hr
%%% = 1-5 days
%%%% = big

* internal cleanups
- [ ] % Delete ActivationBase, now that the simplified Activation no longer
      requires a Closure
- [ ] % move `fun.rs` stuff into its own directory, split up file
- [ ] % Could the lifetimes on Plan and PredicatePlan be simplified?
- [ ] % Rename `Plan` to `ExprPlan`, for symmetry with `PredicatePlan`.
- [ ] % reverse order of arguments to `impl_value_variant`, to more closely
      match how variants are defined
- [ ] % computation of `paths_iter` is horrible
- [ ] % `Callable` is a stupid lexeme, they're Functions
- [ ] % give up on 'organizing' the uses into extern, std, and intra-crate, just
      sort them
- [ ] % actually use ExprLabeler's lambda_count, use_count to size CaptureMap tables
- [ ] %% Pull out concept of a 'capturing expression' from fun.rs; lambdas and
      stream predicate applications are both capturing expressions. LambdaInfo,
      etc. will need to be renamed.
- [ ] %% Should Callable not expect a cx? Streams are just boxed
      FallibleIterators, where the Rust closure captures the `dump` or the `cx`.
      There's no way to specify the cx to use to produce the next item. If
      that's acceptable, then it must be acceptable for Callables to do the
      same.
- [ ] %% Make `IdVec` iteration produce (index, value) pairs, `fmt::Debug` print as map
- [ ] %% <Call as Plan>::run and Function::call force duplicated NotAFunction error handling.
- [ ] %% use interned atoms for identifiers, instead of strings (crate string_cache?)
- [ ] %% Change `TryUnwrap` to `FromValue`? so you'd write `Stream<'a>::from_value`?
      Could this clean up the `let stream ...; let stream ...;` ugliness?
  Could this handle the borrowed-Value case more gracefully?
- [ ] %% Common `BoxedClone` trait for `ClonableStream` and `ClonableCallable`?
- [ ] %% trait for structs from which we can fetch fields by name?
- [ ] %% rearrange into parse, analyze, plan; put `Plan` and `Globals` in `query/mod.rs`.
- [ ] %% Represent streams as Fns that build a FallibleIterator. This would
      clearly separate the values that can be shared (the Fns) from the things
      that are modified destructively when values are drawn from them (the
      FallibleIterators).
- [ ] %% Separate planning code, Plan implementations by category? Predicate, Expr, Fun?
- [ ] %%% bring internal documentation back to life
- [ ] %%% finish fallible-iterator
- [ ] %%% can we specialize some plans to the value types they produce?
- [ ] %%% update dependencies to avoid compiling expensive crates multiple times

* language features
- [ ] %% re-implement filters and stream literals. They need to capture, like lambda.
- [ ] %% map - followed by Suffix!
- [ ] %% distinguish 'shortestPaths', 'allPaths'
- [ ] %% pathsfrom
- [ ] %% bug: `paths` assumes core dump edges and id's are all well-formed;
      BreadthFirst should implement FallibleIterator
- [ ] %% avoid exposing hash table nondeterminism (just keep a sorted list of ids)
- [ ] %% How to turn a list of edges into a list of the nodes referred to? (map?)
- [ ] %% tail recursion, by adding a trampoline variant to the
      `ClonableCallable::call` return type
- [ ] %%% should paths be their own type? might be nice
- [ ] %%% nicknames for nodes/edges
- [ ] %%% save previous results for use in future queries, `Out[1] = ...`
- [ ] %%% print closures helpfully
- [ ] %%%% top-level definitions
- [ ] %%%% files, modules
- [ ] %%%% better layout / pretty-printing
- [ ] %%%% static type checking
  - [ ] %%%% explicit types on closure arguments
  - [ ] %%%% homogeneous streams

* performance
- [ ] %% accumulate and pass arguments in chunks, not one by one
- [ ] %% put expensive streams on their own threads
- [ ] %%% Could some Streams be double-ended? HashMap::Iter isn't double-ended,
      so iterating over nodes couldn't be, unless we were using a sorted id
      list. Order of 'edges' is meaningless. bfs can't. But literals and paths
      are ordered. Should compare execution time of 'root paths ends id:
      0x7f412ebb2040' with and without, since without double-endedness that ends
      up actually drawing all elements from each path.
- [ ] %%% Can EqualPredicate cache its given value? (A 'once_cache' in the global environment?)
- [ ] %%% specialize to avoid dynamic dispatch for constants and variable references
      (once we can actually write code large enough to benchmark)

* error handling
- [ ] %%% report errors from lexing (denoted_regex, denoted_string)
- [ ] %%% source positions
- [ ] %%% improved output formats for values, more recognizable for general users

* command-line usability
- [ ] %% Operate directly on compressed files. However, decompressing a 13MiB
      snapshot takes about 0.3s, so it's probably nice to retain the ability to
      operate on uncompressed files by just mapping them into memory.
- [ ] %% publish as crate

* ideas that need development
- set operations: union, intersection, subtract - need Eq, Hash
- grouping, sorting - need Ord
- dominator trees
- specify our own trait for formatting values?
