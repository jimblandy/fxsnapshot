// -*- mode: rust -*-

use query::ast::{denoted_string,
                 denoted_regex,
                 Builder,
                 Expr,
                 ExprId,
                 Var,
                 Predicate,
                 PredicateOp};
use regex;

grammar;

pub Query: Box<Expr> = {
    <Expr<"">>,
}

// There are two flavors of expressions: Expr<""> is the full expression
// grammar, while Expr<"No Parens"> excludes parenthesized expressions. The
// latter is used for implicit equality predicates, like the "5" in "id: 5".
// Because predicates can be parenthesized too, there is no actual change to the
// set of strings accepted; the conditional simply tells LALRPOP that it can
// parse "(5)" in "id: (5)" as a predicate, not an expression, while still
// parsing it as an expression in "id: ((5))".

Expr<P> = {
    <Application<P>>,
    <Lambda>
}

Application<P>: Box<Expr> = {
    <head: PrimaryExpr<P>> <suffixes: Suffix*> => suffixes.into_iter().fold(head, |e, s| s(e)),
    <head: PrimaryExpr<P>> <suffixes: Suffix*> <fun: Lambda> => {
        let arg = suffixes.into_iter().fold(head, |e, s| s(e));
        Box::new(Expr::App { fun, arg })
    }
};

// A Suffix parses to a closure that will build an expr, given the left-hand
// operand. This is a bit baroque, but having the grammar this way seemed nicer
// than the alternatives.
Suffix: Builder = {
    <PrimaryExpr<"">> => Box::new(move |lhs| Box::new(Expr::App { arg: lhs, fun: <> })),

    <op: PredicateOp> <predicate: Predicate> =>
        Box::new(move |lhs| Box::new(Expr::Predicate(lhs, op, predicate))),
    "{" <predicates: Comma<Predicate>> "}" =>
        Box::new(move |lhs| Box::new(Expr::Predicate(lhs, PredicateOp::Filter,
                                                     Predicate::And(predicates)))),
}

PrimaryExpr<P>: Box<Expr> = {
    // Numeric literal.
    <n: r"0x[0-9a-fA-F]+"> => Box::new(Expr::Number(u64::from_str_radix(&n[2..], 16).unwrap())),
    <n: r"[0-9]+"> => Box::new(Expr::Number(str::parse(&n).unwrap())),

    // String literal.
    <n: r#""([^\\"]|\\.)*""#> => Box::new(Expr::String(denoted_string(&n[1..n.len() - 1]))),

    // Stream literal.
    "[" <elts: Comma<Expr<"">>> "]" => Box::new(Expr::StreamLiteral(elts)),

    // Grouping. Conditional to avoid ambiguity with predicates.
    "(" <e: Expr<"">> ")" if P != "No Parens" => e,

    // Variable references.
    <Var> => Box::new(Expr::Var(<>)),
};

Var: Var = {
    "edges" => Var::Edges,
    "first" => Var::First,
    "nodes" => Var::Nodes,
    "paths" => Var::Paths,
    "root" => Var::Root,

    // Reference to a global or local variable.
    <Id> => Var::Id(<>),
};

Lambda: Box<Expr> = "|" <var: Id> "|" <body: Expr<"">> =>
    Box::new(Expr::Lambda { var, body, id: ExprId(0) });

PredicateOp: PredicateOp = {
    "find" => PredicateOp::Find,
    "until" => PredicateOp::Until,
};

Predicate: Predicate = {
    <PrimaryPredicate>,
    <left: Predicate> "||" <right: PrimaryPredicate> => {
        match left {
            Predicate::Or(mut predicates) => {
                predicates.push(right);
                Predicate::Or(predicates)
            }
            _ => Predicate::Or(vec![left, right])
        }
    },
    <left: Predicate> "&&" <right: PrimaryPredicate> => {
        match left {
            Predicate::And(mut predicates) => {
                predicates.push(right);
                Predicate::And(predicates)
            }
            _ => Predicate::And(vec![left, right])
        }
    }
};

PrimaryPredicate: Predicate = {
    <PrimaryExpr<"No Parens">> => Predicate::Expr(<>),
    <id: Id> ":" <p: PrimaryPredicate> => Predicate::Field(id, Box::new(p)),
    <r: r"/([^\\/]|\\.)*/"> => Predicate::Regex(regex::Regex::new(&denoted_regex(&r[1..r.len()-1])).unwrap()),
    <r: r"#/([^/]|/[^#])*/#"> => Predicate::Regex(regex::Regex::new(&r[2..r.len()-2]).unwrap()),
    "ends" <p: PrimaryPredicate> => Predicate::Ends(Box::new(p)),
    "any" <p: PrimaryPredicate> => Predicate::Any(Box::new(p)),
    "all" <p: PrimaryPredicate> => Predicate::All(Box::new(p)),
    "!" <p: PrimaryPredicate> => Predicate::Not(Box::new(p)),
    "(" <p: Predicate> ")" => p,
};

Id: String = <r"[a-zA-Z_][a-zA-Z0-9_]*"> => <>.to_owned();

Comma<T>: Vec<T> = {
    <v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};
